import { useState, useEffect } from "react";
import Sidebar from "../../components/Dashboard/Sidebar";

const AdminDashboard = () => {
  const [reservations, setReservations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        const [servicesResponse, bookingsResponse] = await Promise.all([
          fetch("http://localhost:5000/api/services"),
          fetch("http://localhost:5000/api/bookings")
        ]);

        if (!servicesResponse.ok || !bookingsResponse.ok) {
          throw new Error('Erreur lors de la récupération des données');
        }

        const [servicesData, bookingsData] = await Promise.all([
          servicesResponse.json(),
          bookingsResponse.json()
        ]);

        // Formater les données
        const formattedReservations = [
          ...servicesData.map(s => ({
            ...s,
            type: 'service',
            bookingDate: s.createdAt,
            status: 'active',
            totalPrice: s.price // Pour les services, le prix total est le prix unitaire
          })),
          ...bookingsData.map(b => ({
            ...b,
            type: 'booking',
            bookingDate: b.createdAt,
            // Le prix total est déjà inclus dans les données de réservation
            totalPrice: b.totalPrice || b.service.price
          }))
        ].sort((a, b) => new Date(b.bookingDate) - new Date(a.bookingDate));

        setReservations(formattedReservations);
      } catch (err) {
        console.error("Erreur:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const formatDate = (dateString) => {
    if (!dateString) return "Non spécifié";
    try {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <Sidebar />
      
      <div className="flex-1 overflow-auto p-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-6">Toutes les Réservations</h1>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          {loading ? (
            <div className="flex justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
            </div>
          ) : error ? (
            <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-red-700">{error}</p>
                </div>
              </div>
            </div>
          ) : reservations.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              Aucune réservation disponible
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date de réservation</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dates de service</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prix Total</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {reservations.map(reservation => (
                    <tr key={`${reservation.type}-${reservation._id}`}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(reservation.bookingDate)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {reservation.service?.name || 'N/A'}
                        </div>
                        <div className="text-xs text-gray-500">
                          {reservation.type === 'booking' ? 'Réservation' : 'Service'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {reservation.client ? (
                          <>
                            <div className="text-sm font-medium text-gray-900">
                              {reservation.client?.name || 'N/A'}
                            </div>
                            <div className="text-sm text-gray-500">
                              {reservation.client?.phone || ''}
                            </div>
                            <div className="text-sm text-gray-500">
                              {reservation.client?.email || ''}
                            </div>
                          </>
                        ) : (
                          <div className="text-sm text-gray-500">Non applicable</div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {reservation.type === 'service' || reservation.type === 'booking' ? (
                            reservation.schedule?.frequency === 'une seule fois' && reservation.schedule?.selectedDate ? (
                              // Une seule date
                              formatDate(reservation.schedule.selectedDate)
                            ) : reservation.schedule?.frequency === 'plusieurs fois par semaine' ? (
                              <>
                              Du {formatDate(reservation.schedule.startDate)}<br />
                              Au {formatDate(reservation.schedule.endDate)}
                              </>
                            ) : (
                              formatDate(reservation.createdAt) // fallback
                            )
                          ) : (
                            formatDate(reservation.createdAt) // fallback
                          )}
                        </div>

                        {/* Affichage des jours sélectionnés si plusieurs fois */}
                        {reservation.schedule?.frequency === 'plusieurs fois par semaine' && reservation.schedule?.selectedDays?.length > 0 && (
                          <div className="text-xs text-gray-500">
                            Jours: {reservation.schedule.selectedDays.join(', ')}
                          </div>
                        )}
                      </td>

                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {reservation.totalPrice || reservation.service?.price || 'N/A'} MAD
                      </td>

                      

                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                          ${reservation.status === 'confirmed' || reservation.status === 'active' ? 'bg-green-100 text-green-800' : 
                            reservation.status === 'cancelled' ? 'bg-red-100 text-red-800' : 
                            'bg-yellow-100 text-yellow-800'}`}>
                          {reservation.status === 'confirmed' ? 'Confirmé' : 
                           reservation.status === 'cancelled' ? 'Annulé' : 
                           reservation.status === 'active' ? 'Actif' : 'Inconnu'}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard; 